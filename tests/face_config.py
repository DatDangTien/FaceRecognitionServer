"""
Configuration class for Face Recognition System
Qu·∫£n l√Ω t·∫•t c·∫£ thresholds v√† parameters cho h·ªá th·ªëng nh·∫≠n di·ªán khu√¥n m·∫∑t
"""
import cv2

# Get font constant after cv2 is fully imported
TEXT_FONT_DEFAULT = None
try:
    TEXT_FONT_DEFAULT = cv2.FONT_HERSHEY_SIMPLEX
except AttributeError:
    # Fallback if cv2 doesn't have FONT_HERSHEY_SIMPLEX
    TEXT_FONT_DEFAULT = 0  # cv2.FONT_HERSHEY_SIMPLEX typically equals 0

class FaceRecognitionConfig:
    """Configuration class for face recognition system"""
    
    # ==================== QUALITY THRESHOLDS ====================
    # Threshold cho vi·ªác ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng face
    REGISTRATION_QUALITY_THRESHOLD = 0.85  # Cao h∆°n cho ƒëƒÉng k√Ω (ch·∫•t l∆∞·ª£ng t·ªët)
    INFERENCE_QUALITY_THRESHOLD = 0.70     # Th·∫•p h∆°n cho nh·∫≠n di·ªán (linh ho·∫°t h∆°n)
    
    # ==================== RECOGNITION THRESHOLDS ====================
    # Threshold cho vi·ªác nh·∫≠n di·ªán face
    RECOGNITION_SIMILARITY_THRESHOLD = 0.30  # Cosine similarity threshold
    DUPLICATE_DETECTION_THRESHOLD = 0.60     # Ph√°t hi·ªán duplicate khi ƒëƒÉng k√Ω
    
    # ==================== FACE QUALITY CHECKS ====================
    # Blur detection thresholds
    REGISTRATION_BLUR_THRESHOLD = 100       # Cao h∆°n cho ƒëƒÉng k√Ω
    INFERENCE_BLUR_THRESHOLD = 80           # Th·∫•p h∆°n cho nh·∫≠n di·ªán
    
    # Face size thresholds
    REGISTRATION_MIN_FACE_SIZE = 80         # K√≠ch th∆∞·ªõc t·ªëi thi·ªÉu cho ƒëƒÉng k√Ω
    INFERENCE_MIN_FACE_SIZE = 50            # K√≠ch th∆∞·ªõc t·ªëi thi·ªÉu cho nh·∫≠n di·ªán
    
    # Lighting condition thresholds
    REGISTRATION_DARK_RATIO_THRESHOLD = 0.3   # T·ª∑ l·ªá pixel t·ªëi cho ƒëƒÉng k√Ω
    REGISTRATION_BRIGHT_RATIO_THRESHOLD = 0.3 # T·ª∑ l·ªá pixel s√°ng cho ƒëƒÉng k√Ω
    INFERENCE_DARK_RATIO_THRESHOLD = 0.4      # Linh ho·∫°t h∆°n cho nh·∫≠n di·ªán
    INFERENCE_BRIGHT_RATIO_THRESHOLD = 0.4    # Linh ho·∫°t h∆°n cho nh·∫≠n di·ªán
    
    # Pose estimation thresholds
    REGISTRATION_POSE_THRESHOLD = 2000      # MSE threshold cho ƒëƒÉng k√Ω
    INFERENCE_POSE_THRESHOLD = 3000         # MSE threshold cho nh·∫≠n di·ªán
    
    # ==================== MTCNN SETTINGS ====================
    MTCNN_MARGIN = 20
    MTCNN_KEEP_ALL = False
    MTCNN_SELECT_LARGEST = True
    MTCNN_POST_PROCESS = True
    MTCNN_THRESHOLDS = [0.6, 0.7, 0.7]     # P-Net, R-Net, O-Net thresholds
    
    # ==================== TRACKING SETTINGS ====================
    DETECTION_INTERVAL = 5                  # S·ªë frames gi·ªØa c√°c l·∫ßn detect m·ªõi
    TRACKER_TYPE = 'CSRT'                   # Lo·∫°i tracker s·ª≠ d·ª•ng
    
    # ==================== CAMERA SETTINGS ====================
    CAMERA_WIDTH = 640
    CAMERA_HEIGHT = 480
    FACE_SIZE = 160                         # K√≠ch th∆∞·ªõc face tensor
    
    # ==================== REGISTRATION SETTINGS ====================
    REGISTRATION_SAMPLES = 70               # S·ªë l∆∞·ª£ng samples c·∫ßn capture
    REGISTRATION_SKIP_FRAMES = 5            # Skip frames gi·ªØa c√°c l·∫ßn capture
    
    # ==================== DISPLAY SETTINGS ====================
    BBOX_THICKNESS = 6
    TEXT_FONT = TEXT_FONT_DEFAULT
    TEXT_SCALE = 0.8
    TEXT_THICKNESS = 2
    
    # Colors (BGR format)
    COLOR_RECOGNIZED = (0, 255, 0)         # Xanh l√° - nh·∫≠n di·ªán th√†nh c√¥ng
    COLOR_UNKNOWN = (0, 0, 255)            # ƒê·ªè - kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c
    COLOR_POOR_QUALITY = (0, 255, 255)     # V√†ng - ch·∫•t l∆∞·ª£ng k√©m
    COLOR_TRACKING = (0, 0, 255)           # ƒê·ªè - ƒëang track
    COLOR_WHITE = (255, 255, 255)          # Tr·∫Øng - text th√¥ng tin
    
    @classmethod
    def get_quality_thresholds(cls, mode='inference'):
        """Get quality thresholds based on mode"""
        if mode == 'registration':
            return {
                'blur_threshold': cls.REGISTRATION_BLUR_THRESHOLD,
                'min_face_size': cls.REGISTRATION_MIN_FACE_SIZE,
                'dark_ratio_threshold': cls.REGISTRATION_DARK_RATIO_THRESHOLD,
                'bright_ratio_threshold': cls.REGISTRATION_BRIGHT_RATIO_THRESHOLD,
                'pose_threshold': cls.REGISTRATION_POSE_THRESHOLD,
                'quality_threshold': cls.REGISTRATION_QUALITY_THRESHOLD
            }
        else:  # inference
            return {
                'blur_threshold': cls.INFERENCE_BLUR_THRESHOLD,
                'min_face_size': cls.INFERENCE_MIN_FACE_SIZE,
                'dark_ratio_threshold': cls.INFERENCE_DARK_RATIO_THRESHOLD,
                'bright_ratio_threshold': cls.INFERENCE_BRIGHT_RATIO_THRESHOLD,
                'pose_threshold': cls.INFERENCE_POSE_THRESHOLD,
                'quality_threshold': cls.INFERENCE_QUALITY_THRESHOLD
            }
    
    @classmethod
    def print_config(cls):
        """Print current configuration"""
        print("üîß FACE RECOGNITION CONFIGURATION:")
        print("=" * 50)
        print(f"Registration Quality Threshold: {cls.REGISTRATION_QUALITY_THRESHOLD}")
        print(f"Inference Quality Threshold: {cls.INFERENCE_QUALITY_THRESHOLD}")
        print(f"Recognition Similarity Threshold: {cls.RECOGNITION_SIMILARITY_THRESHOLD}")
        print(f"Duplicate Detection Threshold: {cls.DUPLICATE_DETECTION_THRESHOLD}")
        print("=" * 50)
